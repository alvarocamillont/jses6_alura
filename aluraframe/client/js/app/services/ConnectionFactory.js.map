{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","connection","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","close","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAQA,Y,GAAS,CAAC,aAAD,C;AACTC,a,GAAU,C;AACVC,Y,GAAS,Y;AACXC,gB,GAAa,I;;mCAEJC,iB;AACX,qCAAe;AAAA;;AACb,gBAAM,IAAIC,KAAJ,CAAU,qDAAV,CAAN;AACD;;;;0CACuB;AACtB,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,kBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBV,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAQ,0BAAYI,eAAZ,GAA8B,aAAK;AACjCT,kCAAkBU,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACD,eAFD;;AAIAR,0BAAYS,SAAZ,GAAwB,aAAK;AAC3B,oBAAI,CAACf,UAAL,EAAiB;AACfA,+BAAaY,EAAEC,MAAF,CAASC,MAAtB;AACAE,0BAAQhB,WAAWgB,KAAnB;AACAhB,6BAAWgB,KAAX,GAAmB,YAAY;AAC7B,0BAAM,IAAId,KAAJ,CAAU,4CAAV,CAAN;AACD,mBAFD;AAGD;AACDE,wBAAQJ,UAAR;AACD,eATD;AAUAM,0BAAYW,OAAZ,GAAsB,aAAK;AACzBC,wBAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;;AAEAf,uBAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACD,eAJD;AAKD,aAtBM,CAAP;AAuBD;;;4CAEyB;AACxB,gBAAIrB,UAAJ,EAAgB;AACdA,yBAAWgB,KAAX;AACAhB,2BAAa,IAAb;AACD;AACF;;;wCACqBA,U,EAAY;AAChCH,mBAAOyB,OAAP,CAAe,iBAAS;AACtB,kBAAItB,WAAWuB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EAAiDzB,WAAW0B,iBAAX,CAA6BD,KAA7B;AACjDzB,yBAAW2B,iBAAX,CAA6BF,KAA7B,EAAoC,EAAEG,eAAe,IAAjB,EAApC;AACD,aAHD;AAID","file":"ConnectionFactory.js","sourcesContent":["  const stores = ['negociacoes']\r\n  const version = 4\r\n  const dbName = 'aluraframe'\r\n  let connection = null\r\n\r\n  export class ConnectionFactory {\r\n    constructor () {\r\n      throw new Error('Não é possível criar instâncias de ConnectinFactory')\r\n    }\r\n    static getConnection () {\r\n      return new Promise((resolve, reject) => {\r\n        let openRequest = window.indexedDB.open(dbName, version)\r\n\r\n        openRequest.onupgradeneeded = e => {\r\n          ConnectionFactory._createStores(e.target.result)\r\n        }\r\n\r\n        openRequest.onsuccess = e => {\r\n          if (!connection) {\r\n            connection = e.target.result\r\n            close = connection.close\r\n            connection.close = function () {\r\n              throw new Error('Você não pode fechar diretamente a conexão')\r\n            }\r\n          }\r\n          resolve(connection)\r\n        }\r\n        openRequest.onerror = e => {\r\n          console.log(e.target.error)\r\n\r\n          reject(e.target.error.name)\r\n        }\r\n      })\r\n    }\r\n\r\n    static closeConnection () {\r\n      if (connection) {\r\n        connection.close()\r\n        connection = null\r\n      }\r\n    }\r\n    static _createStores (connection) {\r\n      stores.forEach(store => {\r\n        if (connection.objectStoreNames.contains(store)) connection.deleteObjectStore(store)\r\n        connection.createObjectStore(store, { autoIncrement: true })\r\n      })\r\n    }\r\n    }\r\n"]}