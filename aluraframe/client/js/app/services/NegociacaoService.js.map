{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["HttpService","ConnectionFactory","Negociacao","NegociacaoDao","NegociacaoService","http","url","msgerro","Promise","resolve","reject","get","then","negociacoes","map","Date","objeto","data","quantidade","valor","catch","console","log","erro","_obterNegociacoes","cb","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","periodos","reduce","dados","periodo","concat","dado","Error","negociacao","getConnection","conexao","dao","adiciona","connection","listaTodos","apagaTodos","listaAtual","obterNegociacoes","filter","some","JSON","stringify","negociacaoExistente"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["import {HttpService} from './HttpService.js'\r\nimport {ConnectionFactory} from './ConnectionFactory.js'\r\nimport {Negociacao} from '../models/Negociacao.js'\r\nimport {NegociacaoDao} from '../dao/NegociacaoDao.js'\r\n\r\nexport class NegociacaoService {\r\n  constructor () {\r\n    this.http = new HttpService()\r\n  }\r\n/*\r\nxhr.readyState\r\n0: requisição ainda não iniciada.\r\n1: conexão com o servidor estabelecida.\r\n2: requisição recebida.\r\n3: processando requisição.\r\n4: requisição concluída e a resposta esta pronta.\r\n*/\r\n  _obterNegociacoes (url, msgerro) {\r\n    return new Promise((resolve, reject) => {\r\n      this.http\r\n                .get(url)\r\n                .then(negociacoes => {\r\n                  resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)))\r\n                })\r\n                .catch(erro => {\r\n                  console.log(erro)\r\n                  reject(msgerro)\r\n                })\r\n    })\r\n  }\r\n\r\n  obterNegociacoesDaSemana () {\r\n    return this._obterNegociacoes('negociacoes/semana', 'Não foi possível obter as negociações da semana')\r\n  }\r\n\r\n  obterNegociacoesDaSemanaAnterior () {\r\n    return this._obterNegociacoes('negociacoes/anterior', 'Não foi possível obter as negociações da semana anterior')\r\n  }\r\n\r\n  obterNegociacoesDaSemanaRetrasada (cb) {\r\n    return this._obterNegociacoes('negociacoes/retrasada', 'Não foi possível obter as negociações da semana Retrasada')\r\n  }\r\n\r\n  obterNegociacoes () {\r\n    return Promise.all([\r\n      this.obterNegociacoesDaSemana(),\r\n      this.obterNegociacoesDaSemanaAnterior(),\r\n      this.obterNegociacoesDaSemanaRetrasada()\r\n    ]).then(periodos => {\r\n      let negociacoes = periodos\r\n                .reduce((dados, periodo) => dados.concat(periodo), [])\r\n                .map(dado => new Negociacao(new Date(dado.data), dado.quantidade, dado.valor))\r\n      return negociacoes\r\n    }).catch(erro => {\r\n      throw new Error(erro)\r\n    })\r\n  }\r\n\r\n  cadastra (negociacao) {\r\n    return ConnectionFactory\r\n            .getConnection()\r\n            .then(conexao => new NegociacaoDao(conexao))\r\n            .then(dao => dao.adiciona(negociacao))\r\n            .then(() => 'Negociação cadastrada com sucesso')\r\n            .catch(erro => {\r\n              console.log(erro)\r\n              throw new Error('Não foi possível adicionar a negociação')\r\n            })\r\n  }\r\n\r\n  lista () {\r\n    return ConnectionFactory\r\n          .getConnection()\r\n          .then(connection => new NegociacaoDao(connection))\r\n          .then(dao => dao.listaTodos())\r\n          .catch(erro => {\r\n            console.log(erro)\r\n            throw new Error('Não foi possível obter as negociações')\r\n          })\r\n  }\r\n\r\n  apaga () {\r\n    return ConnectionFactory\r\n        .getConnection()\r\n        .then(connection => new NegociacaoDao(connection))\r\n        .then(dao => dao.apagaTodos())\r\n        .then(() => 'Negociações apagadas com sucesso')\r\n        .catch(erro => {\r\n          console.log(erro)\r\n          throw new Error('Não foi possível apagar as negociações')\r\n        })\r\n  }\r\n\r\n  importa (listaAtual) {\r\n    return this.obterNegociacoes()\r\n           .then(negociacoes =>\r\n               negociacoes.filter(negociacao =>\r\n                   !listaAtual.some(negociacaoExistente =>\r\n                       JSON.stringify(negociacao) === JSON.stringify(negociacaoExistente)))\r\n           )\r\n           .catch(erro => {\r\n             console.log(erro)\r\n             throw new Error('Não foi possível importar as negociações')\r\n           })\r\n  }\r\n}\r\n"]}