{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["NegociacaoService","http","HttpService","url","msgerro","Promise","resolve","reject","get","then","negociacoes","map","Negociacao","Date","objeto","data","quantidade","valor","catch","console","log","erro","_obterNegociacoes","cb","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","periodos","reduce","dados","periodo","concat","dado","Error","negociacao","ConnectionFactory","getConnection","NegociacaoDao","conexao","dao","adiciona","connection","listaTodos","apagaTodos","listaAtual","obterNegociacoes","filter","some","JSON","stringify","negociacaoExistente"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["class NegociacaoService {\r\n  constructor () {\r\n    this.http = new HttpService()\r\n  }\r\n/*\r\nxhr.readyState\r\n0: requisição ainda não iniciada.\r\n1: conexão com o servidor estabelecida.\r\n2: requisição recebida.\r\n3: processando requisição.\r\n4: requisição concluída e a resposta esta pronta.\r\n*/\r\n  _obterNegociacoes (url, msgerro) {\r\n    return new Promise((resolve, reject) => {\r\n      this.http\r\n                .get(url)\r\n                .then(negociacoes => {\r\n                  resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)))\r\n                })\r\n                .catch(erro => {\r\n                  console.log(erro)\r\n                  reject(msgerro)\r\n                })\r\n    })\r\n  }\r\n\r\n  obterNegociacoesDaSemana () {\r\n    return this._obterNegociacoes('negociacoes/semana', 'Não foi possível obter as negociações da semana')\r\n  }\r\n\r\n  obterNegociacoesDaSemanaAnterior () {\r\n    return this._obterNegociacoes('negociacoes/anterior', 'Não foi possível obter as negociações da semana anterior')\r\n  }\r\n\r\n  obterNegociacoesDaSemanaRetrasada (cb) {\r\n    return this._obterNegociacoes('negociacoes/retrasada', 'Não foi possível obter as negociações da semana Retrasada')\r\n  }\r\n\r\n  obterNegociacoes () {\r\n    return Promise.all([\r\n      this.obterNegociacoesDaSemana(),\r\n      this.obterNegociacoesDaSemanaAnterior(),\r\n      this.obterNegociacoesDaSemanaRetrasada()\r\n    ]).then(periodos => {\r\n      let negociacoes = periodos\r\n                .reduce((dados, periodo) => dados.concat(periodo), [])\r\n                .map(dado => new Negociacao(new Date(dado.data), dado.quantidade, dado.valor))\r\n      return negociacoes\r\n    }).catch(erro => {\r\n      throw new Error(erro)\r\n    })\r\n  }\r\n\r\n  cadastra (negociacao) {\r\n    return ConnectionFactory\r\n            .getConnection()\r\n            .then(conexao => new NegociacaoDao(conexao))\r\n            .then(dao => dao.adiciona(negociacao))\r\n            .then(() => 'Negociação cadastrada com sucesso')\r\n            .catch(erro => {\r\n              console.log(erro)\r\n              throw new Error('Não foi possível adicionar a negociação')\r\n            })\r\n  }\r\n\r\n  lista () {\r\n    return ConnectionFactory\r\n          .getConnection()\r\n          .then(connection => new NegociacaoDao(connection))\r\n          .then(dao => dao.listaTodos())\r\n          .catch(erro => {\r\n            console.log(erro)\r\n            throw new Error('Não foi possível obter as negociações')\r\n          })\r\n  }\r\n\r\n  apaga () {\r\n    return ConnectionFactory\r\n        .getConnection()\r\n        .then(connection => new NegociacaoDao(connection))\r\n        .then(dao => dao.apagaTodos())\r\n        .then(() => 'Negociações apagadas com sucesso')\r\n        .catch(erro => {\r\n          console.log(erro)\r\n          throw new Error('Não foi possível apagar as negociações')\r\n        })\r\n  }\r\n\r\n  importa (listaAtual) {\r\n    return this.obterNegociacoes()\r\n           .then(negociacoes =>\r\n               negociacoes.filter(negociacao =>\r\n                   !listaAtual.some(negociacaoExistente =>\r\n                       JSON.stringify(negociacao) === JSON.stringify(negociacaoExistente)))\r\n           )\r\n           .catch(erro => {\r\n             console.log(erro)\r\n             throw new Error('Não foi possível importar as negociações')\r\n           })\r\n  }\r\n}\r\n"]}