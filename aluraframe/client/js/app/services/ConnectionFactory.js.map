{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["ConnectionFactory","stores","version","dbName","connection","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","close","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;AAAA,IAAIA,oBAAqB,YAAY;AACnC,MAAMC,SAAS,CAAC,aAAD,CAAf;AACA,MAAMC,UAAU,CAAhB;AACA,MAAMC,SAAS,YAAf;AACA,MAAIC,aAAa,IAAjB;;AAEA;AACE,iCAAe;AAAA;;AACb,YAAM,IAAIC,KAAJ,CAAU,qDAAV,CAAN;AACD;;AAHH;AAAA;AAAA,sCAI0B;AACtB,eAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,cAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBT,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAO,sBAAYI,eAAZ,GAA8B,aAAK;AACjCb,8BAAkBc,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACD,WAFD;;AAIAR,sBAAYS,SAAZ,GAAwB,aAAK;AAC3B,gBAAI,CAACd,UAAL,EAAiB;AACfA,2BAAaW,EAAEC,MAAF,CAASC,MAAtB;AACAE,sBAAQf,WAAWe,KAAnB;AACAf,yBAAWe,KAAX,GAAmB,YAAY;AAC7B,sBAAM,IAAId,KAAJ,CAAU,4CAAV,CAAN;AACD,eAFD;AAGD;AACDE,oBAAQH,UAAR;AACD,WATD;AAUAK,sBAAYW,OAAZ,GAAsB,aAAK;AACzBC,oBAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;;AAEAf,mBAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACD,WAJD;AAKD,SAtBM,CAAP;AAuBD;AA5BH;AAAA;AAAA,wCA8B4B;AACxB,YAAIpB,UAAJ,EAAgB;AACdA,qBAAWe,KAAX;AACAf,uBAAa,IAAb;AACD;AACF;AAnCH;AAAA;AAAA,oCAoCwBA,UApCxB,EAoCoC;AAChCH,eAAOwB,OAAP,CAAe,iBAAS;AACtB,cAAIrB,WAAWsB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EAAiDxB,WAAWyB,iBAAX,CAA6BD,KAA7B;AACjDxB,qBAAW0B,iBAAX,CAA6BF,KAA7B,EAAoC,EAAEG,eAAe,IAAjB,EAApC;AACD,SAHD;AAID;AAzCH;;AAAA;AAAA;AA2CD,CAjDuB,EAAxB","file":"ConnectionFactory.js","sourcesContent":["var ConnectionFactory = (function () {\r\n  const stores = ['negociacoes']\r\n  const version = 4\r\n  const dbName = 'aluraframe'\r\n  let connection = null\r\n\r\n  return class ConnectionFactory {\r\n    constructor () {\r\n      throw new Error('Não é possível criar instâncias de ConnectinFactory')\r\n    }\r\n    static getConnection () {\r\n      return new Promise((resolve, reject) => {\r\n        let openRequest = window.indexedDB.open(dbName, version)\r\n\r\n        openRequest.onupgradeneeded = e => {\r\n          ConnectionFactory._createStores(e.target.result)\r\n        }\r\n\r\n        openRequest.onsuccess = e => {\r\n          if (!connection) {\r\n            connection = e.target.result\r\n            close = connection.close\r\n            connection.close = function () {\r\n              throw new Error('Você não pode fechar diretamente a conexão')\r\n            }\r\n          }\r\n          resolve(connection)\r\n        }\r\n        openRequest.onerror = e => {\r\n          console.log(e.target.error)\r\n\r\n          reject(e.target.error.name)\r\n        }\r\n      })\r\n    }\r\n\r\n    static closeConnection () {\r\n      if (connection) {\r\n        connection.close()\r\n        connection = null\r\n      }\r\n    }\r\n    static _createStores (connection) {\r\n      stores.forEach(store => {\r\n        if (connection.objectStoreNames.contains(store)) connection.deleteObjectStore(store)\r\n        connection.createObjectStore(store, { autoIncrement: true })\r\n      })\r\n    }\r\n    }\r\n})()\r\n"]}