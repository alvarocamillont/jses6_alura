{"version":3,"sources":["../../app-es6/services/HttpService.js"],"names":["HttpService","res","ok","Error","statusText","url","fetch","then","_handleErrors","json","dado","headers","method","body","JSON","stringify"],"mappings":";;;;;;IAAMA,W;;;;;;;kCACWC,G,EAAK;AAClB,UAAI,CAACA,IAAIC,EAAT,EAAa,MAAM,IAAIC,KAAJ,CAAUF,IAAIG,UAAd,CAAN;AACb,aAAOH,GAAP;AACD;;;wBAEII,G,EAAK;AAAA;;AACR,aAAOC,MAAMD,GAAN,EACEE,IADF,CACO;AAAA,eAAO,MAAKC,aAAL,CAAmBP,GAAnB,CAAP;AAAA,OADP,EAEEM,IAFF,CAEO;AAAA,eAAON,IAAIQ,IAAJ,EAAP;AAAA,OAFP,CAAP;AAGD;;;yBACKJ,G,EAAKK,I,EAAM;AAAA;;AACf,aAAOJ,MAAMD,GAAN,EAAW;AAChBM,iBAAS,EAAE,gBAAgB,kBAAlB,EADO;AAEhBC,gBAAQ,MAFQ;AAGhBC,cAAMC,KAAKC,SAAL,CAAeL,IAAf;AAHU,OAAX,EAKFH,IALE,CAKG;AAAA,eAAO,OAAKC,aAAL,CAAmBP,GAAnB,CAAP;AAAA,OALH,CAAP;AAMD","file":"HttpService.js","sourcesContent":["class HttpService {\r\n  _handleErrors (res) {\r\n    if (!res.ok) throw new Error(res.statusText)\r\n    return res\r\n  }\r\n\r\n  get (url) {\r\n    return fetch(url)\r\n            .then(res => this._handleErrors(res))\r\n            .then(res => res.json())\r\n  }\r\n  post (url, dado) {\r\n    return fetch(url, {\r\n      headers: { 'Content-Type': 'application/json' },\r\n      method: 'post',\r\n      body: JSON.stringify(dado)\r\n    })\r\n        .then(res => this._handleErrors(res))\r\n  }\r\n}\r\n"]}